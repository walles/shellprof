#!/usr/bin/env python3

"""Profile a shell script

Or actually anything printing to stdout.

Usage: shellprof <command> [args] ...

This will run <command>, and after it is done shellprof will print
a profile of which lines were shown the longest.
"""

import sys
import time
import operator
import subprocess

from typing import List, Tuple

TOP_LIST_ROWS = 10

PROGRAM_START_MARKER = b"<<<PROGRAM START>>>\n"
PROGRAM_END_MARKER = b"<<<PROGRAM END>>>\n"

if len(sys.argv) < 2:
    # One is the executable (this script) name, the rest are command lines
    print("ERROR: Please specify a command line to run")
    print()
    print(__doc__)
    sys.exit(1)

if sys.argv[1] in ["--help", "-h"]:
    print(__doc__)
    sys.exit()

timestamped_lines: List[Tuple[float, bytes]] = []

# Popen scans $PATH for executables, so this should work as people expect
with subprocess.Popen(sys.argv[1:], bufsize=1, stdout=subprocess.PIPE) as child:
    timestamped_lines.append((time.time(), PROGRAM_START_MARKER))
    while True:
        line: bytes = child.stdout.readline()
        if line == b"":
            # The empty string here is just an EOF-marker and shouldn't
            # be treated as part of our child's output.
            break

        timestamp = time.time()
        timestamped_lines.append((timestamp, line))

        # Line collected, now pass it on
        sys.stdout.buffer.write(line)
        sys.stdout.buffer.flush()

timestamped_lines.append((time.time(), PROGRAM_END_MARKER))

# Compute performance stats
durationstamped_lines: List[Tuple[float, bytes]] = []
previous_line = timestamped_lines[0]
for timestamped_line in timestamped_lines[1:]:
    durationstamped_lines.append(
        (timestamped_line[0] - previous_line[0], previous_line[1])
    )
    previous_line = timestamped_line

durationstamped_lines.sort(key=operator.itemgetter(0), reverse=True)

print("")
print("Timings for printed lines:")

printcount = 0
for durationstamped_line in durationstamped_lines:
    duration = durationstamped_line[0]
    line = durationstamped_line[1]
    sys.stdout.buffer.write(b"%.2fs: " % duration)
    sys.stdout.buffer.write(line)

    printcount += 1
    if printcount >= TOP_LIST_ROWS:
        break
